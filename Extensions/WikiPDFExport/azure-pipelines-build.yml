name: $(Major).$(Minor).$(rev:r)  # build numbering format

trigger: 
  branches:
    include: [ main ] # branch names which will trigger a build
  paths:
    include: [ /Extensions/WikiPDFExport ] # file paths which must match to trigger a build, cannot be a variable

pr: # will trigger on PR
  branches:
    include: [ main ] # branch names which will trigger a build
  paths:
    include: [ /Extensions/WikiPDFExport ] # file paths which must match to trigger a build, cannot be a variable

resources:
  repositories: # the test data
    - repository: VSTSBuildTaskValidation
      type: git
      name: VSTSBuildTaskValidation
      branch: master

variables:
  # declared in the pipeline UI
  #  major
  #  minor
  - group:  'WIKIPDFExport Extension'
    # this group includes the following variables  
    #  ExtensionRoot - working folder
    #  PublisherID  - Marketplace publisher
    #  ExtensionID - Marketplace extension id
    #  vmImage - name of Azure DevOps pool to use
    #  artifactLocationName -  folder the artifact to push is stored in
    #  privateExtentionsTag - tag to show if private (else blank)
    #  taskID - Marketplace ID of task
    #  wikiFilename - name of generated docs files
    #  githubPAT - for testing
    #  AzureDevOpsPAT - for testing
stages:
  - stage: Build
    jobs:
    - job: Build
      pool: 
        vmImage: '$(vmImage)'
        demands: npm
      steps:
      # version all the task in the extension
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'Setting the version for tasks in extension'
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/$(ExtensionRoot)'
          targetFiles: '**\\task.json'
      
      # for each Node based task we must transpile it
      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)'
          taskName: 'WikiPDFExportTask'

      - task: TfxInstaller@1
        displayName: 'Install Tfx Tool'
        inputs:
          version: 'v0.6.x'

      - task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageVSTSExtension@1
        displayName: 'Package and Publish Extension as a PROD Package '
        inputs:
          rootFolder: '$(ExtensionRoot)'
          outputPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'
          publisherId: '$(PublisherID)'
          extensionId: '$(ExtensionID)'
          extensionVersion: '$(Build.BuildNumber)'
          updateTasksVersion: true
          extensionVisibility: public

      - task: CopyFiles@2
        displayName: 'Copy Docs'
        inputs:
          SourceFolder: $(ExtensionRoot)
          Contents: |
            readme.md
            vss-extension.json
            **\task\task.json
          TargetFolder: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'vsix'
          targetPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

  - stage: Private
    jobs:
    - deployment: Private_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Private)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
            # we don't need to DownloadPipelineArtifact as this is done automatically
            - template: ..\..\YAMLTemplates\publish-extension.yml
              parameters:
                 vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'  
                 extensionTag: '$(privateExtentionsTag)' 
                 extensionVisibility: private    

  - stage: Test
    dependsOn: Private 
    jobs:
    - deployment: Private_Tests
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (WIKIPDFExport)'
      pool:
        name: default
        # vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: VSTSBuildTaskValidation  
              clean: false
              fetchDepth: 0
              lfs: false
            
            - task: richardfennellBM.BM-VSTS-XplatGenerateReleaseNotes-DEV1.XplatGenerate-Release-Notes.XplatGenerateReleaseNotes@2
              displayName: 'Generate Release Notes based on Release Comparision API'
              inputs:
                outputfile: '$(System.DefaultWorkingDirectory)\inline.md'
                outputVariableName: OutputText
                templateLocation: InLine
                inlinetemplate: |
                  # Release notes 
                  **Build Number**  : ${buildDetails.buildNumber} 
                  **Build started** : ${buildDetails.startTime}  
                  **Source Branch** : ${buildDetails.sourceBranch}  
                  
                  ### Associated work items  
                  @@WILOOP@@  
                  * ** ${widetail.fields['System.WorkItemType']} ${widetail.id} ** Assigned by: ${widetail.fields['System.AssignedTo']}  ${widetail.fields['System.Title']}  
                  @@WILOOP@@  
                    
                  ### Associated commits
                  @@CSLOOP@@  
                  * **ID ${csdetail.commitId} ** ${csdetail.comment}    
                  @@CSLOOP@@
            - task: richardfennellBM.BM-VSTS-WikiPDFExport-Tasks-DEV.WikiPDFExportTask.WikiPdfExportTask@1
              displayName: 'Export Single File'
              inputs:
                cloneRepo: false
                localpath: '$(System.DefaultWorkingDirectory)'
                singleFile: 'inline.md'
                outputFile: '$(Build.ArtifactStagingDirectory)\PDF\singleFile.pdf'
            - task: richardfennellBM.BM-VSTS-WikiPDFExport-Tasks-DEV.WikiPDFExportTask.WikiPdfExportTask@1
              displayName: 'Export Public GitHub WIKI'
              condition: succeededOrFailed()
              inputs:
                cloneRepo: true
                repo: 'https://github.com/rfennell/AzurePipelines.wiki.git'
                useAgentToken: false
                localpath: '$(System.DefaultWorkingDirectory)\GitHubRepo'
                outputFile: '$(Build.ArtifactStagingDirectory)\PDF\publicGitHub.pdf'
            - task: richardfennellBM.BM-VSTS-WikiPDFExport-Tasks-DEV.WikiPDFExportTask.WikiPdfExportTask@1
              displayName: 'Export Azure DevOps WIKI'
              condition: succeededOrFailed()
              inputs:
                cloneRepo: true
                repo: 'https://dev.azure.com/richardfennell/GitHub/_git/GitHub.wiki'
                useAgentToken: true
                outputFile: '$(Build.ArtifactStagingDirectory)\PDF\Azrepo.pdf'
            - task: richardfennellBM.BM-VSTS-WikiPDFExport-Tasks-DEV.WikiPDFExportTask.WikiPdfExportTask@1
              displayName: 'Export Azure DevOps WIKI without downloading tool'
              condition: succeededOrFailed()
              inputs:
                cloneRepo: true
                overrideExePath: '$(System.DefaultWorkingDirectory)/tools/azuredevops-export-wiki.exe'
                repo: 'https://dev.azure.com/richardfennell/GitHub/_git/GitHub.wiki'
                useAgentToken: true
                outputFile: '$(Build.ArtifactStagingDirectory)\PDF\Azrepo-nodownload.pdf'
            - task: PublishPipelineArtifact@0
              condition: succeededOrFailed()
              inputs:
                artifactName: 'PDFs'
                targetPath: '$(Build.ArtifactStagingDirectory)\PDF'
  - stage: Documentation
    dependsOn: Test 
    pool:
      vmImage: '$(vmImage)'
    variables:
    - group: 'WIKI Updater'
    # provides the variable
    #   gitemail - used in the Git Config
    #   gitName - used in the Git Config
    #   githubpat - used to authenticate to repo
    #   user - used to authenticate to repo
    #   repo - url of repo (without HTTPS://)
    jobs:
    - deployment: Documentation
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Documentation)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:   
            steps:
              - template: ..\..\YAMLTemplates\generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)/$(artifactLocationName)'
                  wikiFilename: '$(wikiFilename)'
                  repo: '$(repo)'
                  gitname: '$(GitName)'
                  gitemail: '$(GitEmail)'
                  UserName: '$(UserName)'
                  GitHubPat: '$(GitHubPat)'

  - stage: Public
    dependsOn: Documentation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: Public_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Public)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
              # we don't need to DownloadPipelineArtifact as this is done automatically
              - template: ..\..\YAMLTemplates\publish-extension.yml
                parameters:
                   vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'  
                   extensionTag: '' 
                   extensionVisibility: public    

    - job: Post_Publish
      dependsOn: Public_Deployment 
      pool:
        vmImage: '$(vmImage)'
      steps:
      
        - template: ..\..\YAMLTemplates\post-publish.yml
          parameters:
              buildNumber: $(Build.BuildNumber)  
              extensionName: $(Build.DefinitionName)      
      
name: $(Major).$(Minor).$(rev:r)  # build numbering format

trigger: 
  branches:
    include: [ master ] # branch names which will trigger a build
  paths:
    include: [ Extensions/Versioning ] # file paths which must match to trigger a build, cannot be a variable

pr: # will trigger on PR
  branches:
    include: [ master ] # branch names which will trigger a build
  paths:
    include: [ Extensions/Versioning ] # file paths which must match to trigger a build, cannot be a variable

variables:
  # declared in the pipeline UI
  #  major
  #  minor
  - group:  'Versioning Extension'
    # this group includes the following variablea  
    #  ExtensionRoot - working folder
    #  PublisherID  - Marketplace publisher
    #  ExtensionID - Marketplace extension id
    #  vmImage - name of Azure DevOps pool to use
    #  artifactLocationName -  folder the artifact to push is stored in
    #  privateExtentionsTag - tag to show if private (else blank)
    #  taskID - Marketplace ID of task
    #  wikiFilename - name of generated docs files
stages:
  - stage: Build
    jobs:
    - job: Build
      pool: 
        vmImage: '$(vmImage)'
        demands: npm
      steps:
      # version all the task in the extension
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'Setting the version for tasks in extension'
        inputs:
          rootDirectory: '$(Build.SourcesDirectory)/$(ExtensionRoot)'
          targetFiles: '**\\task.json'

      - task: richardfennellBM.BM-VSTS-PesterRunner-Task.Pester-Task.Pester@8
        displayName: 'DACPac Versioning Pester Test Runner'
        inputs:
          scriptFolder: '$(Build.SourcesDirectory)\$(ExtensionRoot)\VersionDacpacTask\test'
          resultsFile: '$(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
          run32Bit: false
        continueOnError: true

      - task: PublishTestResults@1
        displayName: 'Publish Test Results $(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
        inputs:
          testRunner: NUnit
          testResultsFiles: '$(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
          testRunTitle: 'DACPac Pester Tests'

      - task: richardfennellBM.BM-VSTS-PesterRunner-Task.Pester-Task.Pester@8
        displayName: 'PowerShellModule Versioning Tests'
        inputs:
          scriptFolder: '$(Build.SourcesDirectory)\$(ExtensionRoot)\VersionPowerShellModule\test'
          resultsFile: '$(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
          run32Bit: false

      - task: PublishTestResults@1
        displayName: 'Publish Test Results $(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
        inputs:
          testRunner: NUnit
          testResultsFiles: '$(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
          testRunTitle: 'PowerShellModule Pester Tests'
        condition: succeededOrFailed()
     
      # for each Node based task we must transpile it
      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)'
          taskName: 'VersionDotNetCoreAssembliesTask'

      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)'
          taskName: 'VersionJSONFileTask'

      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)'
          taskName: 'VersionAngularFileTask'

      - template: ..\..\YAMLTemplates\build-node-task.yml
        parameters:
          extensionRoot: '$(ExtensionRoot)'
          taskName: 'VersionAndroidManifest'

      - task: TfxInstaller@1
        displayName: 'Install Tfx Tool'
        inputs:
          version: 'v0.6.x'

      - task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageVSTSExtension@1
        displayName: 'Package and Publish Extension as a PROD Package '
        inputs:
          rootFolder: '$(ExtensionRoot)'
          outputPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'
          publisherId: '$(PublisherID)'
          extensionId: '$(ExtensionID)'
          extensionVersion: '$(Build.BuildNumber)'
          updateTasksVersion: true
          extensionVisibility: public

      - task: CopyFiles@2
        displayName: 'Copy Docs'
        inputs:
          SourceFolder: $(ExtensionRoot)
          Contents: |
            readme.md
            vss-extension.json
            **\task.json
          TargetFolder: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'vsix'
          targetPath: '$(Build.ArtifactStagingDirectory)\\$(artifactLocationName)'

  - stage: Private
    jobs:
    - deployment: Private_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Private)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
            # we don't need to DownloadPipelineArtifact as this is done automatically
            - template: ..\..\YAMLTemplates\publish-extension.yml
              parameters:
                 vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'  
                 extensionTag: '$(privateExtentionsTag)' 
                 extensionVisibility: private    

  - stage: Test_Windows
    dependsOn: Private 
    jobs:
    - deployment: Private_Test
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Versioning)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningDOTNETCORE'
                inputs:
                  buildDefinition: 'Validate-VersioningDOTNETCORE'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningTask.Android'
                inputs:
                  buildDefinition: 'Validate-VersioningTask.Android'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningTask.Master'
                inputs:
                  buildDefinition: 'Validate-VersioningTask.Master'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningTaskCoreStandard.Master'
                inputs:
                  buildDefinition: 'Validate-VersioningTaskCoreStandard.Master'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)

  - stage: Test_Linux
    dependsOn: Private 
    jobs:
    - deployment: Private_Test
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Versioning)'
      pool:
        vmImage: 'ubuntu-18.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningTask.Android'
                inputs:
                  buildDefinition: 'Validate-VersioningTask.Android'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)

  - stage: Test_Mac
    dependsOn: Private 
    jobs:
    - deployment: Private_Test
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Versioning)'
      pool:
        vmImage: 'macOS-10.15'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
                displayName: 'Trigger a new build of Validate-VersioningTask.Android'
                inputs:
                  buildDefinition: 'Validate-VersioningTask.Android'
                  useSameBranch: false
                  branchToUse: master
                  waitForQueuedBuildsToFinish: true
                  authenticationMethod: 'OAuth Token'
                  password: $(System.AccessToken)

  - stage: Documentation
    dependsOn: 
    - Test_Windows
    - Test_Linux
    - Test_Mac
    variables:
    - group: 'WIKI Updater'
    # provides the variable
    #   gitemail - used in the Git Config
    #   gitName - used in the Git Config
    #   githubpat - used to authenticate to repo
    #   user - used to authenticate to repo
    #   repo - url of repo (without HTTPS://)
    jobs:
    - deployment: Documentation
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Documentation)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:   
            steps:
              - template: ..\..\YAMLTemplates\generate-wiki-docs.yml
                parameters:
                  workingDirectory: '$(Agent.BuildDirectory)/$(artifactLocationName)'
                  wikiFilename: '$(wikiFilename)'
                  repo: '$(repo)'
                  gitname: '$(GitName)'
                  gitemail: '$(GitEmail)'
                  UserName: '$(UserName)'
                  GitHubPat: '$(GitHubPat)'

  - stage: Public
    dependsOn: Documentation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - deployment: Public_Deployment
      timeoutInMinutes: 0
      environment: 'Azure DevOps Marketplace (Public)'
      pool:
        vmImage: '$(vmImage)'
      strategy:
        runOnce:
          deploy:
            steps:
              # we don't need to DownloadPipelineArtifact as this is done automatically
              - template: ..\..\YAMLTemplates\publish-extension.yml
                parameters:
                   vsixPath: '$(Agent.BuildDirectory)\\$(artifactLocationName)\\$(PublisherID).$(ExtensionID)-$(Build.BuildNumber).vsix'  
                   extensionTag: '' 
                   extensionVisibility: public    

    - job: Post_Publish
      dependsOn: Public_Deployment 
      pool:
        vmImage: '$(vmImage)'
      steps:
        - template: ..\..\YAMLTemplates\post-publish.yml
          parameters:
              buildNumber: $(Build.BuildNumber)  
              extensionName: $(Build.DefinitionName)      
                
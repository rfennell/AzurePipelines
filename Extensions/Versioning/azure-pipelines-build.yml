resources:
- repo: self

name: $(Major).$(Minor).$(rev:r)  # build numbering format

trigger: none # will disable CI build

pr: # will trigger on PR
  branches:
    include: [ master ] # branch names which will trigger a build
  paths:
    include: [ /Extensions/Versioning ] # file paths which must match to trigger a build

pool:
  name: Hosted VS2017
  demands: npm

variables:
  ExtensionRoot: 'Extensions/Versioning'

steps:
- task: qetza.replacetokens.replacetokens-task.replacetokens@1
  displayName: 'Replace tokens in **\task.json'
  inputs:
    rootDirectory: '$(ExtensionRoot)'
    targetFiles: '**\task.json'

- task: richardfennellBM.BM-VSTS-PesterRunner-Task-DEV.Pester-Task.Pester@8
  displayName: 'DACPac Versioning Pester Test Runner'
  inputs:
    scriptFolder: '$(Build.SourcesDirectory)\$(ExtensionRoot)\VersionDacpacTask\test'
    resultsFile: '$(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
    run32Bit: false
  continueOnError: true

- task: PublishTestResults@1
  displayName: 'Publish Test Results $(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
  inputs:
    testRunner: NUnit
    testResultsFiles: '$(Build.SourcesDirectory)\Test-VersionDacpacTaskPester.XML'
    testRunTitle: 'DACPac Pester Tests'

- task: richardfennellBM.BM-VSTS-PesterRunner-Task-DEV.Pester-Task.Pester@8
  displayName: 'PowerShellModule Versioning Tests'
  inputs:
    scriptFolder: '$(Build.SourcesDirectory)\$(ExtensionRoot)\VersionPowerShellModule\test'
    resultsFile: '$(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
    run32Bit: false

- task: PublishTestResults@1
  displayName: 'Publish Test Results $(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
  inputs:
    testRunner: NUnit
    testResultsFiles: '$(Build.SourcesDirectory)\Test-VersionPowerShellTaskPester.XML'
    testRunTitle: 'PowerShellModule Pester Tests'
  condition: succeededOrFailed()

# standard block for Node
- task: Npm@0
  displayName: 'npm install VersionDotNetCoreAssembliesTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask'

- task: jessehouwing.vsts-snyk.vsts-snyk.Snyk@2
  displayName: 'Scan for vulnerable package dependencies in VersionDotNetCoreAssembliesTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask\'
    file: package.json
    monitor: true
    endpoint: 'Snky (Github RFennell)'

- task: Npm@0
  displayName: 'npm run build VersionDotNetCoreAssembliesTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask'
    command: run
    arguments: build

- task: Npm@0
  displayName: 'npm run test VersionDotNetCoreAssembliesTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask'
    command: run
    arguments: test

- task: PublishTestResults@2
  displayName: 'Publish Test Results  VersionDotNetCoreAssembliesTask'
  inputs:
    testResultsFiles: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask\test-output\test-results.xml'
    testRunTitle: 'VersionDotNetCoreAssembliesTask'

- task: Npm@0
  displayName: 'npm run package VersionDotNetCoreAssembliesTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionDotNetCoreAssembliesTask'
    command: run
    arguments: package
# end node block

# standard block for Node
- task: Npm@0
  displayName: 'npm install VersionJSONFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionJSONFileTask'

- task: jessehouwing.vsts-snyk.vsts-snyk.Snyk@2
  displayName: 'Scan for vulnerable package dependencies in VersionJSONFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionJSONFileTask\'
    file: package.json
    monitor: true
    endpoint: 'Snky (Github RFennell)'

- task: Npm@0
  displayName: 'npm run build VersionJSONFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionJSONFileTask'
    command: run
    arguments: build

- task: Npm@0
  displayName: 'npm run test VersionJSONFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionJSONFileTask'
    command: run
    arguments: test

- task: PublishTestResults@2
  displayName: 'Publish Test Results  VersionJSONFileTask'
  inputs:
    testResultsFiles: '$(ExtensionRoot)\VersionJSONFileTask\test-output\test-results.xml'
    testRunTitle: 'VersionJSONFileTask'

- task: Npm@0
  displayName: 'npm run package VersionJSONFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionJSONFileTask'
    command: run
    arguments: package
# end node block

# standard block for Node
- task: Npm@0
  displayName: 'npm install VersionAngularFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAngularFileTask'

- task: jessehouwing.vsts-snyk.vsts-snyk.Snyk@2
  displayName: 'Scan for vulnerable package dependencies in VersionAngularFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAngularFileTask\'
    file: package.json
    monitor: true
    endpoint: 'Snky (Github RFennell)'

- task: Npm@0
  displayName: 'npm run build VersionAngularFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAngularFileTask'
    command: run
    arguments: build

- task: Npm@0
  displayName: 'npm run test VersionAngularFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAngularFileTask'
    command: run
    arguments: test

- task: PublishTestResults@2
  displayName: 'Publish Test Results  VersionAngularFileTask'
  inputs:
    testResultsFiles: '$(ExtensionRoot)\VersionAngularFileTask\test-output\test-results.xml'
    testRunTitle: 'VersionAngularFileTask'

- task: Npm@0
  displayName: 'npm run package VersionAngularFileTask'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAngularFileTask'
    command: run
    arguments: package
# end node block

# standard block for Node
- task: Npm@0
  displayName: 'npm install VersionAndroidManifest'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAndroidManifest'

- task: jessehouwing.vsts-snyk.vsts-snyk.Snyk@2
  displayName: 'Scan for vulnerable package dependencies in VersionAndroidManifest'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAndroidManifest\'
    file: package.json
    monitor: true
    endpoint: 'Snky (Github RFennell)'

- task: Npm@0
  displayName: 'npm run build VersionAndroidManifest'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAndroidManifest'
    command: run
    arguments: build

- task: Npm@0
  displayName: 'npm run test VersionAndroidManifest'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAndroidManifest'
    command: run
    arguments: test

- task: PublishTestResults@2
  displayName: 'Publish Test Results  VersionAndroidManifest'
  inputs:
    testResultsFiles: '$(ExtensionRoot)\VersionAndroidManifest\test-output\test-results.xml'
    testRunTitle: 'VersionAndroidManifest'

- task: Npm@0
  displayName: 'npm run package VersionAndroidManifest'
  inputs:
    cwd: '$(ExtensionRoot)\VersionAndroidManifest'
    command: run
    arguments: package
# end node block

- task: ms-devlabs.vsts-developer-tools-build-tasks.package-extension-build-task.PackageVSTSExtension@1
  displayName: 'Package Extension: PUBLIC'
  inputs:
    rootFolder: '$(ExtensionRoot)'
    outputPath: '$(Build.ArtifactStagingDirectory)\vsix'
    publisherId: '$(PublisherID)'
    extensionId: '$(ExtensionID)'
    extensionVersion: '$(Build.BuildNumber)'
    updateTasksVersion: true
    extensionVisibility: public

- task: CopyFiles@2
  displayName: 'Copy Docs'
  inputs:
    SourceFolder: Extensions/Versioning
    Contents: |
     readme.md
     vss-extension.json
     **\task.json
    TargetFolder: '$(Build.ArtifactStagingDirectory)\vsix'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: vsix'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\vsix'
    ArtifactName: vsix

